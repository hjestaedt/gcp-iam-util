#!/usr/bin/env bash
# cli and usage functions

usage_global() {
    echo "gcp iam utility tool v$VERSION"
    echo ""
    echo "usage: $SCRIPT_NAME <command> [options] <args>"
    echo ""
    echo "commands:"
    echo "  roles                manage iam roles"
    echo ""
    echo "global options:"
    echo "  -h, --help      show this help message"
    echo "  -v, --version   show version information"
    echo ""
    echo "use '$SCRIPT_NAME <command> --help' for command specific help"
    echo ""
    echo "examples:"
    echo "  $SCRIPT_NAME roles is-subset roles/viewer roles/editor"
    echo "  $SCRIPT_NAME roles get-permissions roles/editor roles/admin"
    echo "  $SCRIPT_NAME roles get-permissions -o perms.txt roles/viewer"
}

usage_roles() {
    echo "usage: $SCRIPT_NAME roles <sub-command> [options] <args>"
    echo ""
    echo "manage iam roles and their permissions"
    echo ""
    echo "sub-commands:"
    echo "  is-subset               check if permissions of source are subset of target(s)"
    echo "  get-permissions         get permissions list for one or more roles"
    echo ""
    echo "options:"
    echo "  -h, --help              show this help message"
    echo ""
    echo "use '$SCRIPT_NAME roles <sub-command> --help' for sub-command specific help"
    echo ""
    echo "examples:"
    echo "  $SCRIPT_NAME roles is-subset roles/viewer roles/editor"
    echo "  $SCRIPT_NAME roles get-permissions roles/editor roles/admin"
}

usage_is_subset() {
    echo "usage: $SCRIPT_NAME roles is-subset [options] source target1 [target2 target3 ...]"
    echo ""
    echo "checks if all permissions of source are included in target(s)"
    echo ""
    echo "arguments:"
    echo "  source       source role or permission file (subset to check)"
    echo "  target1...   target role(s) or permission file(s) (superset to check against)"
    echo ""
    echo "options:"
    echo "  -o, --output file   write missing permissions to file"
    echo "  -p, --project id    set gcp project id for custom roles"
    echo "  -h, --help          show this help message"
    echo ""
    echo "examples:"
    echo "  $SCRIPT_NAME roles is-subset roles/viewer roles/editor"
    echo "  $SCRIPT_NAME roles is-subset roles/viewer roles/editor roles/admin"
    echo "  $SCRIPT_NAME roles is-subset -p my-project custom-role1 custom-role2"
    echo "  $SCRIPT_NAME roles is-subset roles/viewer permissions.txt"
    echo "  $SCRIPT_NAME roles is-subset -o missing.txt roles/editor roles/viewer"
    echo "  $SCRIPT_NAME roles is-subset source-role.txt target-role.txt"
}

usage_get_permissions() {
    echo "usage: $SCRIPT_NAME roles get-permissions [options] role1 [role2 role3 ...]"
    echo ""
    echo "get permissions list for one or more roles"
    echo ""
    echo "arguments:"
    echo "  role1...     role name(s) or permission file(s) to get permissions from"
    echo ""
    echo "options:"
    echo "  -o, --output file   write permissions to file instead of stdout"
    echo "  -p, --project id    set gcp project id for custom roles"
    echo "  -h, --help          show this help message"
    echo ""
    echo "output:"
    echo "  - one permission per line"
    echo "  - deduplicated (no duplicates from multiple roles)"
    echo "  - sorted alphabetically"
    echo ""
    echo "examples:"
    echo "  $SCRIPT_NAME roles get-permissions roles/editor"
    echo "  $SCRIPT_NAME roles get-permissions roles/viewer roles/editor"
    echo "  $SCRIPT_NAME roles get-permissions -p my-project custom-role1 roles/admin"
    echo "  $SCRIPT_NAME roles get-permissions -o all-perms.txt roles/editor roles/admin"
} 